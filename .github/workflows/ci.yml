name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  MIX_ENV: test
  ELIXIR_VERSION: '1.15.7'
  OTP_VERSION: '26.0'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        elixir: ['1.15.7', '1.16.0']
        otp: ['25.3', '26.0']
        exclude:
          - elixir: '1.15.7'
            otp: '25.3'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{ matrix.elixir }}
        otp-version: ${{ matrix.otp }}
    
    - name: Restore dependencies cache
      uses: actions/cache@v3
      with:
        path: |
          deps
          _build
          priv/plts
        key: ${{ runner.os }}-mix-${{ matrix.elixir }}-${{ matrix.otp }}-${{ hashFiles('**/mix.lock') }}
        restore-keys: ${{ runner.os }}-mix-${{ matrix.elixir }}-${{ matrix.otp }}-
    
    - name: Install dependencies
      run: |
        mix local.rebar --force
        mix local.hex --force
        mix deps.get
    
    - name: Check formatting
      run: mix format --check-formatted
    
    - name: Run credo
      run: mix credo --strict
    
    - name: Check for unused dependencies
      run: mix deps.unlock --check-unused
    
    - name: Compile dependencies
      run: mix deps.compile
    
    - name: Compile project
      run: mix compile --warnings-as-errors
    
    - name: Run tests
      run: mix test
    
    - name: Run coverage
      run: mix coveralls.github
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  dialyzer:
    name: Dialyzer
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{ env.ELIXIR_VERSION }}
        otp-version: ${{ env.OTP_VERSION }}
    
    - name: Restore dependencies cache
      uses: actions/cache@v3
      with:
        path: |
          deps
          _build
          priv/plts
        key: ${{ runner.os }}-dialyzer-${{ env.ELIXIR_VERSION }}-${{ env.OTP_VERSION }}-${{ hashFiles('**/mix.lock') }}
        restore-keys: ${{ runner.os }}-dialyzer-${{ env.ELIXIR_VERSION }}-${{ env.OTP_VERSION }}-
    
    - name: Install dependencies
      run: |
        mix local.rebar --force
        mix local.hex --force
        mix deps.get
    
    - name: Compile project
      run: mix compile
    
    - name: Create PLTs directory
      run: mkdir -p priv/plts
    
    - name: Run dialyzer
      run: mix dialyzer

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{ env.ELIXIR_VERSION }}
        otp-version: ${{ env.OTP_VERSION }}
    
    - name: Install dependencies
      run: |
        mix local.rebar --force
        mix local.hex --force
        mix deps.get
    
    - name: Check for security vulnerabilities
      run: mix deps.audit

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{ env.ELIXIR_VERSION }}
        otp-version: ${{ env.OTP_VERSION }}
    
    - name: Install dependencies
      run: |
        mix local.rebar --force
        mix local.hex --force
        mix deps.get
    
    - name: Generate documentation
      run: mix docs
    
    - name: Check documentation coverage
      run: mix docs --format html --output doc/test

  publish:
    name: Publish to Hex
    runs-on: ubuntu-latest
    needs: [test, dialyzer, security, docs]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{ env.ELIXIR_VERSION }}
        otp-version: ${{ env.OTP_VERSION }}
    
    - name: Install dependencies
      run: |
        mix local.rebar --force
        mix local.hex --force
        mix deps.get
    
    - name: Publish to Hex
      run: mix hex.publish --yes
      env:
        HEX_API_KEY: ${{ secrets.HEX_API_KEY }}
      continue-on-error: true